
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Parser;

import java_cup.runtime.*;
import Visitor.*;
import Visitable.*;
import Tree.TreeNode;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserCup extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserCup() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\074\000\002\002\006\000\002\002\004\000\002\020" +
    "\004\000\002\020\004\000\002\020\002\000\002\021\004" +
    "\000\002\021\003\000\002\003\005\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\017\005\000\002" +
    "\017\003\000\002\023\005\000\002\023\003\000\002\005" +
    "\012\000\002\022\004\000\002\022\002\000\002\026\004" +
    "\000\002\026\003\000\002\006\007\000\002\010\003\000" +
    "\002\010\003\000\002\007\005\000\002\011\006\000\002" +
    "\011\005\000\002\011\006\000\002\011\011\000\002\011" +
    "\013\000\002\011\011\000\002\011\011\000\002\025\005" +
    "\000\002\025\005\000\002\025\003\000\002\025\003\000" +
    "\002\024\005\000\002\024\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\005\000\002\012\003\000\002\012" +
    "\004\000\002\012\005\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\005\000\002\014\004\000\002" +
    "\014\005\000\002\014\005\000\002\015\003\000\002\015" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\174\000\004\004\005\001\002\000\004\002\176\001" +
    "\002\000\014\005\ufffd\006\015\007\013\010\007\011\010" +
    "\001\002\000\004\052\062\001\002\000\010\017\ufff7\030" +
    "\ufff7\052\ufff7\001\002\000\004\052\154\001\002\000\014" +
    "\005\ufffd\006\015\007\013\010\007\011\010\001\002\000" +
    "\004\005\017\001\002\000\010\017\ufff8\030\ufff8\052\ufff8" +
    "\001\002\000\014\005\ufffd\006\015\007\013\010\007\011" +
    "\010\001\002\000\010\017\ufff9\030\ufff9\052\ufff9\001\002" +
    "\000\004\005\uffff\001\002\000\024\012\027\015\021\023" +
    "\031\026\020\031\026\032\023\051\022\052\036\053\037" +
    "\001\002\000\004\012\145\001\002\000\024\012\027\015" +
    "\021\023\031\026\020\031\026\032\023\051\022\052\036" +
    "\053\037\001\002\000\042\013\uffdc\014\uffdc\017\uffdc\021" +
    "\uffdc\030\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\040\uffdc" +
    "\041\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\001" +
    "\002\000\014\012\027\032\023\051\022\052\044\053\037" +
    "\001\002\000\016\021\uffe0\030\140\033\046\034\047\035" +
    "\052\036\051\001\002\000\030\002\uffeb\012\uffeb\015\uffeb" +
    "\016\uffeb\023\uffeb\026\uffeb\031\uffeb\032\uffeb\051\uffeb\052" +
    "\uffeb\053\uffeb\001\002\000\006\021\uffdf\030\136\001\002" +
    "\000\014\012\027\032\023\051\022\052\044\053\037\001" +
    "\002\000\004\002\001\001\002\000\004\012\077\001\002" +
    "\000\004\021\075\001\002\000\030\002\uffec\012\uffec\015" +
    "\uffec\016\uffec\023\uffec\026\uffec\031\uffec\032\uffec\051\uffec" +
    "\052\uffec\053\uffec\001\002\000\030\002\ufffb\012\027\015" +
    "\021\016\ufffb\023\031\026\020\031\026\032\023\051\022" +
    "\052\036\053\037\001\002\000\004\020\066\001\002\000" +
    "\024\012\041\020\ufff5\021\uffd9\022\042\030\040\033\uffd9" +
    "\034\uffd9\035\uffd9\036\uffd9\001\002\000\042\013\uffdb\014" +
    "\uffdb\017\uffdb\021\uffdb\030\uffdb\033\uffdb\034\uffdb\035\uffdb" +
    "\036\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\045" +
    "\uffdb\046\uffdb\001\002\000\004\052\062\001\002\000\014" +
    "\012\027\032\023\051\022\052\044\053\037\001\002\000" +
    "\014\012\027\032\023\051\022\052\044\053\037\001\002" +
    "\000\014\017\050\033\046\034\047\035\052\036\051\001" +
    "\002\000\042\013\uffd9\014\uffd9\017\uffd9\021\uffd9\030\uffd9" +
    "\033\uffd9\034\uffd9\035\uffd9\036\uffd9\040\uffd9\041\uffd9\042" +
    "\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\001\002\000\014" +
    "\012\027\032\023\051\022\052\044\053\037\001\002\000" +
    "\014\012\uffd6\032\uffd6\051\uffd6\052\uffd6\053\uffd6\001\002" +
    "\000\014\012\uffd5\032\uffd5\051\uffd5\052\uffd5\053\uffd5\001" +
    "\002\000\030\002\uffe7\012\uffe7\015\uffe7\016\uffe7\023\uffe7" +
    "\026\uffe7\031\uffe7\032\uffe7\051\uffe7\052\uffe7\053\uffe7\001" +
    "\002\000\014\012\uffd3\032\uffd3\051\uffd3\052\uffd3\053\uffd3" +
    "\001\002\000\014\012\uffd4\032\uffd4\051\uffd4\052\uffd4\053" +
    "\uffd4\001\002\000\042\013\uffda\014\uffda\017\uffda\021\uffda" +
    "\030\uffda\033\046\034\047\035\052\036\051\040\uffda\041" +
    "\uffda\042\uffda\043\uffda\044\uffda\045\uffda\046\uffda\001\002" +
    "\000\004\014\060\001\002\000\016\014\uffdd\030\056\033" +
    "\046\034\047\035\052\036\051\001\002\000\014\012\027" +
    "\032\023\051\022\052\044\053\037\001\002\000\004\014" +
    "\uffde\001\002\000\004\052\062\001\002\000\004\013\063" +
    "\001\002\000\012\013\ufff5\017\ufff5\020\ufff5\030\040\001" +
    "\002\000\004\017\064\001\002\000\030\002\uffe6\012\uffe6" +
    "\015\uffe6\016\uffe6\023\uffe6\026\uffe6\031\uffe6\032\uffe6\051" +
    "\uffe6\052\uffe6\053\uffe6\001\002\000\010\013\ufff6\017\ufff6" +
    "\020\ufff6\001\002\000\010\006\015\007\013\010\007\001" +
    "\002\000\006\017\ufff3\030\072\001\002\000\004\017\071" +
    "\001\002\000\030\002\uffe9\012\uffe9\015\uffe9\016\uffe9\023" +
    "\uffe9\026\uffe9\031\uffe9\032\uffe9\051\uffe9\052\uffe9\053\uffe9" +
    "\001\002\000\010\006\015\007\013\010\007\001\002\000" +
    "\004\017\ufff4\001\002\000\006\002\ufffc\016\ufffc\001\002" +
    "\000\004\017\076\001\002\000\030\002\uffe8\012\uffe8\015" +
    "\uffe8\016\uffe8\023\uffe8\026\uffe8\031\uffe8\032\uffe8\051\uffe8" +
    "\052\uffe8\053\uffe8\001\002\000\022\012\102\032\023\037" +
    "\105\047\101\050\104\051\022\052\044\053\037\001\002" +
    "\000\024\033\046\034\047\035\052\036\051\042\131\043" +
    "\125\044\133\045\130\046\127\001\002\000\010\013\uffd2" +
    "\040\uffd2\041\uffd2\001\002\000\022\012\102\032\023\037" +
    "\105\047\101\050\104\051\022\052\044\053\037\001\002" +
    "\000\010\013\113\040\107\041\111\001\002\000\010\013" +
    "\uffd1\040\uffd1\041\uffd1\001\002\000\022\012\102\032\023" +
    "\037\105\047\101\050\104\051\022\052\044\053\037\001" +
    "\002\000\010\013\uffcf\040\107\041\111\001\002\000\022" +
    "\012\uffcc\032\uffcc\037\uffcc\047\uffcc\050\uffcc\051\uffcc\052" +
    "\uffcc\053\uffcc\001\002\000\022\012\102\032\023\037\105" +
    "\047\101\050\104\051\022\052\044\053\037\001\002\000" +
    "\022\012\uffcb\032\uffcb\037\uffcb\047\uffcb\050\uffcb\051\uffcb" +
    "\052\uffcb\053\uffcb\001\002\000\010\013\uffd0\040\107\041" +
    "\111\001\002\000\004\024\114\001\002\000\004\015\021" +
    "\001\002\000\006\017\117\025\116\001\002\000\004\015" +
    "\021\001\002\000\030\002\uffe4\012\uffe4\015\uffe4\016\uffe4" +
    "\023\uffe4\026\uffe4\031\uffe4\032\uffe4\051\uffe4\052\uffe4\053" +
    "\uffe4\001\002\000\004\017\121\001\002\000\030\002\uffe5" +
    "\012\uffe5\015\uffe5\016\uffe5\023\uffe5\026\uffe5\031\uffe5\032" +
    "\uffe5\051\uffe5\052\uffe5\053\uffe5\001\002\000\026\013\132" +
    "\033\046\034\047\035\052\036\051\042\131\043\125\044" +
    "\133\045\130\046\127\001\002\000\010\013\124\040\107" +
    "\041\111\001\002\000\010\013\uffcd\040\uffcd\041\uffcd\001" +
    "\002\000\014\012\uffc9\032\uffc9\051\uffc9\052\uffc9\053\uffc9" +
    "\001\002\000\014\012\027\032\023\051\022\052\044\053" +
    "\037\001\002\000\014\012\uffc6\032\uffc6\051\uffc6\052\uffc6" +
    "\053\uffc6\001\002\000\014\012\uffc7\032\uffc7\051\uffc7\052" +
    "\uffc7\053\uffc7\001\002\000\014\012\uffca\032\uffca\051\uffca" +
    "\052\uffca\053\uffca\001\002\000\042\013\uffd7\014\uffd7\017" +
    "\uffd7\021\uffd7\030\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7" +
    "\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046" +
    "\uffd7\001\002\000\014\012\uffc8\032\uffc8\051\uffc8\052\uffc8" +
    "\053\uffc8\001\002\000\020\013\uffce\033\046\034\047\035" +
    "\052\036\051\040\uffce\041\uffce\001\002\000\014\013\132" +
    "\033\046\034\047\035\052\036\051\001\002\000\016\012" +
    "\027\031\026\032\023\051\022\052\044\053\037\001\002" +
    "\000\004\021\uffe1\001\002\000\016\012\027\031\026\032" +
    "\023\051\022\052\044\053\037\001\002\000\004\021\uffe2" +
    "\001\002\000\042\013\uffd8\014\uffd8\017\uffd8\021\uffd8\030" +
    "\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\040\uffd8\041\uffd8" +
    "\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8\001\002\000" +
    "\004\016\144\001\002\000\034\002\uffea\012\uffea\015\uffea" +
    "\016\uffea\017\uffea\023\uffea\025\uffea\026\uffea\031\uffea\032" +
    "\uffea\051\uffea\052\uffea\053\uffea\001\002\000\022\012\102" +
    "\032\023\037\105\047\101\050\104\051\022\052\044\053" +
    "\037\001\002\000\010\013\147\040\107\041\111\001\002" +
    "\000\004\027\150\001\002\000\004\015\021\001\002\000" +
    "\004\017\152\001\002\000\030\002\uffe3\012\uffe3\015\uffe3" +
    "\016\uffe3\023\uffe3\026\uffe3\031\uffe3\032\uffe3\051\uffe3\052" +
    "\uffe3\053\uffe3\001\002\000\004\005\ufffe\001\002\000\004" +
    "\012\155\001\002\000\012\006\015\007\013\010\007\013" +
    "\ufff0\001\002\000\004\013\161\001\002\000\034\006\015" +
    "\007\013\010\007\012\ufff0\013\ufff0\015\ufff0\023\ufff0\026" +
    "\ufff0\031\ufff0\032\ufff0\051\ufff0\052\ufff0\053\ufff0\001\002" +
    "\000\026\012\ufff1\013\ufff1\015\ufff1\023\ufff1\026\ufff1\031" +
    "\ufff1\032\ufff1\051\ufff1\052\ufff1\053\ufff1\001\002\000\004" +
    "\014\162\001\002\000\010\006\015\007\013\010\007\001" +
    "\002\000\004\015\166\001\002\000\012\006\015\007\013" +
    "\010\007\015\uffee\001\002\000\004\015\uffef\001\002\000" +
    "\032\006\015\007\013\010\007\012\ufff0\015\ufff0\023\ufff0" +
    "\026\ufff0\031\ufff0\032\ufff0\051\ufff0\052\ufff0\053\ufff0\001" +
    "\002\000\014\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2" +
    "\001\002\000\024\012\027\015\021\023\031\026\020\031" +
    "\026\032\023\051\022\052\036\053\037\001\002\000\004" +
    "\016\172\001\002\000\004\017\173\001\002\000\014\005" +
    "\uffed\006\uffed\007\uffed\010\uffed\011\uffed\001\002\000\004" +
    "\017\175\001\002\000\040\005\ufffa\006\ufffa\007\ufffa\010" +
    "\ufffa\011\ufffa\012\ufffa\013\ufffa\015\ufffa\023\ufffa\026\ufffa" +
    "\031\ufffa\032\ufffa\051\ufffa\052\ufffa\053\ufffa\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\174\000\004\002\003\001\001\000\002\001\001\000" +
    "\012\003\013\004\005\005\010\020\011\001\001\000\004" +
    "\017\173\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\013\004\005\005\010\020\152\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\013\004\005\005" +
    "\010\020\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\007\032\010\033\011\024\012\023\017\034\021" +
    "\027\025\031\001\001\000\002\001\001\000\020\007\032" +
    "\010\033\011\024\012\023\017\034\021\142\025\031\001" +
    "\001\000\002\001\001\000\004\012\141\001\001\000\004" +
    "\013\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\134\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\007\032\010" +
    "\033\011\024\012\023\017\034\021\073\025\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\064\001\001\000\006\012\054\024\053\001\001" +
    "\000\004\012\042\001\001\000\004\013\044\001\001\000" +
    "\002\001\001\000\004\012\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\044\001\001\000\002\001\001" +
    "\000\004\013\044\001\001\000\006\012\054\024\056\001" +
    "\001\000\002\001\001\000\004\017\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\066\023\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\066\023\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\077\014\102\001\001\000\006\013\044\016\125\001\001" +
    "\000\002\001\001\000\006\012\121\014\122\001\001\000" +
    "\004\015\107\001\001\000\002\001\001\000\006\012\077" +
    "\014\105\001\001\000\004\015\107\001\001\000\002\001" +
    "\001\000\006\012\077\014\111\001\001\000\002\001\001" +
    "\000\004\015\107\001\001\000\002\001\001\000\004\007" +
    "\114\001\001\000\002\001\001\000\004\007\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\044\016\125\001\001\000\004\015\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\133\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\044\001" +
    "\001\000\004\013\044\001\001\000\006\012\023\025\136" +
    "\001\001\000\002\001\001\000\006\012\023\025\140\001" +
    "\001\000\002\001\001\000\004\013\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\077\014\145\001" +
    "\001\000\004\015\107\001\001\000\002\001\001\000\004" +
    "\007\150\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\156\004\005" +
    "\022\155\001\001\000\002\001\001\000\010\003\156\004" +
    "\005\022\157\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\163\004\005\026\162\001\001\000\004\006" +
    "\166\001\001\000\010\003\163\004\005\026\164\001\001" +
    "\000\002\001\001\000\010\003\156\004\005\022\167\001" +
    "\001\000\002\001\001\000\020\007\032\010\033\011\024" +
    "\012\023\017\034\021\170\025\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
	private String nomefile = "output.c";
	
	public void setNameFile(String nomefile){
		this.nomefile = nomefile;
	}

    public void syntax_error(Symbol token){
		System.err.println("Syntax error - Token: " + token.sym + " Line: " + token.left + " Column: " + token.right);
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserCup$actions {
  private final ParserCup parser;

  /** Constructor */
  CUP$ParserCup$actions(ParserCup parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action_part00000000(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programma ::= HEAD Decls START Statements 
            {
              TreeNode RESULT =null;
		int declsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		ArrayList<TreeNode<Object>> decls = (ArrayList<TreeNode<Object>>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ArrayList<TreeNode<Object>> statements = (ArrayList<TreeNode<Object>>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
			
																							ArrayList<TreeNode<Object>> node_decl = decls;
																							TreeNode<Object> left = new Decls("Decls", node_decl);
																								
																							ArrayList<TreeNode<Object>> node_statements = statements;
																							TreeNode<Object> right = new Statements("Statements", node_statements);
																								
																							ArrayList<TreeNode<Object>> node = new ArrayList<TreeNode<Object>>();
																							node.add(left);
																							node.add(right);
																							RESULT = new ProgramOp("ProgramOp", node);
																							
																							Visitor v = new SemanticVisitor();
																							RESULT.accept(v);
																							v = new CVisitor();
																							v.fileOut(nomefile);
																							RESULT.accept(v);
																						
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Programma",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programma EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		TreeNode start_val = (TreeNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Decls ::= Var_decl Decls 
            {
              ArrayList<TreeNode<Object>> RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		TreeNode var = (TreeNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int declsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ArrayList<TreeNode<Object>> decls = (ArrayList<TreeNode<Object>>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
  																							ArrayList<TreeNode<Object>> node = decls;
  																							node.add(var);
  																							RESULT = node;
																						
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Decls",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Decls ::= Def_decl Decls 
            {
              ArrayList<TreeNode<Object>> RESULT =null;
		int defleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		TreeNode def = (TreeNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int declsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ArrayList<TreeNode<Object>> decls = (ArrayList<TreeNode<Object>>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 
					  																		ArrayList<TreeNode<Object>> node = decls;
  																							node.add(def);
  																							RESULT = node;
																						
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Decls",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decls ::= 
            {
              ArrayList<TreeNode<Object>> RESULT =null;
		 	RESULT = new ArrayList<TreeNode<Object>>();; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Decls",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Statements ::= Stat Statements 
            {
              ArrayList<TreeNode<Object>> RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		TreeNode stat = (TreeNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ArrayList<TreeNode<Object>> statements = (ArrayList<TreeNode<Object>>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
																							ArrayList<TreeNode<Object>> node = statements;
  																							node.add(stat);
  																							RESULT = node;
																						
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Statements",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Statements ::= Stat 
            {
              ArrayList<TreeNode<Object>> RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int statright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		TreeNode stat = (TreeNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 	
																							ArrayList<TreeNode<Object>> node = new ArrayList<TreeNode<Object>>();
																							node.add(stat);
																							RESULT = node; 
																						
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Statements",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Var_decl ::= Type Vars SEMI 
            {
              TreeNode RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		TreeNode type = (TreeNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		TreeNode vars = (TreeNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
																									
																							ArrayList<TreeNode<Object>> node  = new ArrayList<TreeNode<Object>>();;
																							node.add(type);
																							node.add(vars); 
																							RESULT = new VarDeclOp("VarDeclOp", node);
																						
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Var_decl",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= INT 
            {
              TreeNode RESULT =null;
		 	RESULT = new IntegerType("IntegerType", "int"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Type",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= BOOL 
            {
              TreeNode RESULT =null;
		 	RESULT = new BooleanType("BooleanType", "boolean"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Type",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= DOUBLE 
            {
              TreeNode RESULT =null;
		 	RESULT = new DoubleType("DoubleType",  "double"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Type",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Vars ::= NAME COMMA Vars 
            {
              TreeNode RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Integer name = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		TreeNode vars = (TreeNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
																							ArrayList<TreeNode<Object>> node = new ArrayList<TreeNode<Object>>();
																							node.add(new Name("Name", name));
																							node.add(vars);
																							RESULT = new VarOp("VarOp", node);
																						
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Vars",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Vars ::= NAME 
            {
              TreeNode RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Integer name = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 	
																							ArrayList<TreeNode<Object>> node = new ArrayList<TreeNode<Object>>();
																							node.add(new Name("Name", name));
																							RESULT = new VarOp("VarOp", node);
																						
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Vars",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Types ::= Type COMMA Types 
            {
              ArrayList<TreeNode<Object>> RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		TreeNode type = (TreeNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int typesleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int typesright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ArrayList<TreeNode<Object>> types = (ArrayList<TreeNode<Object>>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 	
																							ArrayList<TreeNode<Object>> node = types;
																							node.add(type);
																							RESULT = types;
																						
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Types",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Types ::= Type 
            {
              ArrayList<TreeNode<Object>> RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		TreeNode type = (TreeNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 	
																							ArrayList<TreeNode<Object>> node = new ArrayList<TreeNode<Object>>();
																							node.add(type);
																							RESULT = node; 
																						
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Types",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Def_decl ::= DEF NAME LPAR Var_decls RPAR COLON Par_decls Body 
            {
              TreeNode RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		Integer name = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int var_declsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int var_declsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		ArrayList<TreeNode<Object>> var_decls = (ArrayList<TreeNode<Object>>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int par_declsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int par_declsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		ArrayList<TreeNode<Object>> par_decls = (ArrayList<TreeNode<Object>>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		TreeNode body = (TreeNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 	
																											TreeNode<Object> left = new VarDecl("VarDecl", var_decls);
																											
																											TreeNode<Object> right = new ParDecl("ParDecl", par_decls);
																											
																											ArrayList<TreeNode<Object>> node = new ArrayList<TreeNode<Object>>();
																											node.add(new Name("Name", name));
																											node.add(left);
																											node.add(right);  
																											node.add(body); 
																											RESULT = new ProDeclOp("ProDeclOp", node); 
																										
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Def_decl",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Var_decls ::= Var_decl Var_decls 
            {
              ArrayList<TreeNode<Object>> RESULT =null;
		int var_decleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int var_decright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		TreeNode var_dec = (TreeNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int var_declsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int var_declsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ArrayList<TreeNode<Object>> var_decls = (ArrayList<TreeNode<Object>>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 
																							ArrayList<TreeNode<Object>> node_var_decls = var_decls;
  																							node_var_decls.add(var_dec);
  																							RESULT = node_var_decls;
																						
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Var_decls",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Var_decls ::= 
            {
              ArrayList<TreeNode<Object>> RESULT =null;
		 	RESULT = new ArrayList<TreeNode<Object>>(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Var_decls",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Par_decls ::= Var_decl Par_decls 
            {
              ArrayList<TreeNode<Object>> RESULT =null;
		int var_decleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int var_decright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		TreeNode var_dec = (TreeNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int par_declsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int par_declsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ArrayList<TreeNode<Object>> par_decls = (ArrayList<TreeNode<Object>>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 	ArrayList<TreeNode<Object>> children = par_decls;
																							children.add(var_dec);
																							RESULT = par_decls;
																						
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Par_decls",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Par_decls ::= Var_decl 
            {
              ArrayList<TreeNode<Object>> RESULT =null;
		int var_decleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int var_decright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		TreeNode var_dec = (TreeNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 
																							ArrayList<TreeNode<Object>> node = new ArrayList<TreeNode<Object>>();
																							node.add(var_dec);
																							RESULT = node;
																						
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Par_decls",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Body ::= LGPAR Var_decls Statements RGPAR SEMI 
            {
              TreeNode RESULT =null;
		int var_declsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int var_declsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		ArrayList<TreeNode<Object>> var_decls = (ArrayList<TreeNode<Object>>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		ArrayList<TreeNode<Object>> statements = (ArrayList<TreeNode<Object>>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		 	ArrayList<TreeNode<Object>> node_var_decls = var_decls;
																							TreeNode<Object> left = new VarDecl("VarDecl", node_var_decls);
																								
																							ArrayList<TreeNode<Object>> node_statements = statements;
																							TreeNode<Object> right = new Statements("Statements", node_statements);
																							
																							ArrayList<TreeNode<Object>> children = new ArrayList<TreeNode<Object>>();
																							children.add(left); 
																							children.add(right); 
																							RESULT = new BodyOp("BodyOp", children); 
																						
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Body",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Stat ::= Comp_stat 
            {
              TreeNode RESULT =null;
		int comp_statleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int comp_statright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		TreeNode comp_stat = (TreeNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 	RESULT = comp_stat; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Stat",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Stat ::= Simple_stat 
            {
              TreeNode RESULT =null;
		int simple_statleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int simple_statright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		TreeNode simple_stat = (TreeNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 	RESULT = simple_stat; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Stat",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Comp_stat ::= LGPAR Statements RGPAR 
            {
              TreeNode RESULT =null;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		ArrayList<TreeNode<Object>> statements = (ArrayList<TreeNode<Object>>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 	ArrayList<TreeNode<Object>> node_statements = statements;
																							RESULT = new CompStatOp("CompStatOp", node_statements);  
																						
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Comp_stat",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Simple_stat ::= Vars READ Types SEMI 
            {
              TreeNode RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		TreeNode vars = (TreeNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int typesleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int typesright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		ArrayList<TreeNode<Object>> types = (ArrayList<TreeNode<Object>>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 	
																							ArrayList<TreeNode<Object>> node_type = types;
																							TreeNode<Object> right = new Types("Types", node_type);
																								
																							ArrayList<TreeNode<Object>> node = new ArrayList<TreeNode<Object>>();
																							node.add(vars); 
																							node.add(right); 
																							RESULT = new ReadOp("ReadOp", node);  
																						
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Simple_stat",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Simple_stat ::= Out_values WRITE SEMI 
            {
              TreeNode RESULT =null;
		int out_valuesleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int out_valuesright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		ArrayList<TreeNode<Object>> out_values = (ArrayList<TreeNode<Object>>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		 	
																							ArrayList<TreeNode<Object>> node_out_values = out_values;
																							TreeNode<Object> left = new WriteOut("WriteOut", node_out_values);
																								
																							ArrayList<TreeNode<Object>> node = new ArrayList<TreeNode<Object>>();
																							node.add(left); 
																							RESULT = new WriteOp("WriteOp", node);
																						
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Simple_stat",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Simple_stat ::= NAME ASSIGN Expr SEMI 
            {
              TreeNode RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Integer name = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		TreeNode expr = (TreeNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 	ArrayList<TreeNode<Object>> node = new ArrayList<TreeNode<Object>>();
																							node.add(new Name("Name", name));
																							node.add(expr); 
																							RESULT = new AssignOp("AssignOp", node); 
																						
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Simple_stat",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Simple_stat ::= NAME LPAR Exprs COLON Vars RPAR SEMI 
            {
              TreeNode RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		Integer name = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		ArrayList<TreeNode<Object>> exprs = (ArrayList<TreeNode<Object>>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		TreeNode vars = (TreeNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
			
																							ArrayList<TreeNode<Object>> expression = exprs;
																							TreeNode<Object> node_expr = new Exprs("Exprs", expression);
																						
																							ArrayList<TreeNode<Object>> node = new ArrayList<TreeNode<Object>>();
																							node.add(new Name("Name", name));
																							node.add(node_expr);
																							node.add(vars);
																							RESULT = new CallOp("CallOp", node); 
																						
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Simple_stat",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Simple_stat ::= IF LPAR Bool_expr RPAR THEN Comp_stat ELSE Comp_stat SEMI 
            {
              TreeNode RESULT =null;
		int bool_exprleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int bool_exprright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		TreeNode bool_expr = (TreeNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int comp_stat_1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int comp_stat_1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		TreeNode comp_stat_1 = (TreeNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int comp_stat_2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int comp_stat_2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		TreeNode comp_stat_2 = (TreeNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 	ArrayList<TreeNode<Object>> node = new ArrayList<TreeNode<Object>>();
																															node.add(bool_expr);
																															node.add(comp_stat_1);
																															node.add(comp_stat_2);  
																															RESULT = new IfThenElseOp("IfThenElseOp", node); 
																														
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Simple_stat",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Simple_stat ::= IF LPAR Bool_expr RPAR THEN Comp_stat SEMI 
            {
              TreeNode RESULT =null;
		int bool_exprleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int bool_exprright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		TreeNode bool_expr = (TreeNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int comp_statleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int comp_statright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		TreeNode comp_stat = (TreeNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 	ArrayList<TreeNode<Object>> node = new ArrayList<TreeNode<Object>>();
																															node.add(bool_expr);
																															node.add(comp_stat);  
																															RESULT = new IfThenOp("IfThenOp", node); 
																														
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Simple_stat",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Simple_stat ::= WHILE LPAR Bool_expr RPAR DO Comp_stat SEMI 
            {
              TreeNode RESULT =null;
		int bool_exprleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int bool_exprright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		TreeNode bool_expr = (TreeNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int comp_statleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int comp_statright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		TreeNode comp_stat = (TreeNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 	ArrayList<TreeNode<Object>> node = new ArrayList<TreeNode<Object>>();
																															node.add(bool_expr);
																															node.add(comp_stat);  
																															RESULT = new WhileOp("WhileOp", node); 
																														
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Simple_stat",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Out_values ::= Expr COMMA Out_values 
            {
              ArrayList<TreeNode<Object>> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		TreeNode expr = (TreeNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int out_valuesleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int out_valuesright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ArrayList<TreeNode<Object>> out_values = (ArrayList<TreeNode<Object>>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 	ArrayList<TreeNode<Object>> node_out_values = out_values;
  																								node_out_values.add(expr);
  																								RESULT = node_out_values; 
																							
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Out_values",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Out_values ::= STRING_CONST COMMA Out_values 
            {
              ArrayList<TreeNode<Object>> RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int out_valuesleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int out_valuesright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ArrayList<TreeNode<Object>> out_values = (ArrayList<TreeNode<Object>>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 	ArrayList<TreeNode<Object>> node_out_values = out_values;
  																								node_out_values.add(new StringConstant("StringConstant", str));
  																								RESULT = node_out_values;  
																							
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Out_values",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Out_values ::= Expr 
            {
              ArrayList<TreeNode<Object>> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		TreeNode expr = (TreeNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 	ArrayList<TreeNode<Object>> node = new ArrayList<TreeNode<Object>>();
																								node.add(expr);
																								RESULT = node; 
																							
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Out_values",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Out_values ::= STRING_CONST 
            {
              ArrayList<TreeNode<Object>> RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 	ArrayList<TreeNode<Object>> node = new ArrayList<TreeNode<Object>>();
																								node.add(new StringConstant("StringConstant", str));
																								RESULT = node;
																							
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Out_values",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Exprs ::= Expr COMMA Exprs 
            {
              ArrayList<TreeNode<Object>> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		TreeNode expr = (TreeNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ArrayList<TreeNode<Object>> exprs = (ArrayList<TreeNode<Object>>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		  ArrayList<TreeNode<Object>> node_exprs = exprs;
  																								exprs.add(expr);
  																								RESULT = exprs;
																							
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Exprs",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Exprs ::= Expr 
            {
              ArrayList<TreeNode<Object>> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		TreeNode expr = (TreeNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 	ArrayList<TreeNode<Object>> node = new ArrayList<TreeNode<Object>>();
																								node.add(expr);
																								RESULT = node;
																							
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Exprs",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expr ::= INT_CONST 
            {
              TreeNode RESULT =null;
		int int_constleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int int_constright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Integer int_const = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 	RESULT = new IntegerConstant("IntegerConstant", int_const); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expr ::= DOUBLE_CONST 
            {
              TreeNode RESULT =null;
		int double_constleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int double_constright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Double double_const = (Double)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 	RESULT = new DoubleConstant("DoubleConstant", double_const	); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expr ::= Expr Arith_op Expr 
            {
              TreeNode RESULT =null;
		int expr_1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int expr_1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		TreeNode expr_1 = (TreeNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int arith_opleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int arith_opright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		TreeNode arith_op = (TreeNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int expr_2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int expr_2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		TreeNode expr_2 = (TreeNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 	ArrayList<TreeNode<Object>> node = new ArrayList<TreeNode<Object>>();
																								node.add(expr_1);
																								node.add(expr_2);
																								node.add(arith_op);  
																								RESULT = new ExprArithOp("ExprArithOp", node); 
																							
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expr ::= NAME 
            {
              TreeNode RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Integer name = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 	RESULT = new Name("Name", name); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expr ::= UMINUS Expr 
            {
              TreeNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		TreeNode expr = (TreeNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		  ArrayList<TreeNode<Object>> node = new ArrayList<TreeNode<Object>>();
																								node.add(expr);
																								RESULT = new UminuOp("UminuOp", node);
																							
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expr ::= LPAR Expr RPAR 
            {
              TreeNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		TreeNode expr = (TreeNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 	RESULT = expr; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expr",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Arith_op ::= PLUS 
            {
              TreeNode RESULT =null;
		 RESULT = new ArithmeticOperator("ArithmeticOperator", "+"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Arith_op",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Arith_op ::= MINUS 
            {
              TreeNode RESULT =null;
		 RESULT = new ArithmeticOperator("ArithmeticOperator", "-"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Arith_op",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Arith_op ::= TIMES 
            {
              TreeNode RESULT =null;
		 RESULT = new ArithmeticOperator("ArithmeticOperator", "*"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Arith_op",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Arith_op ::= DIV 
            {
              TreeNode RESULT =null;
		 RESULT = new ArithmeticOperator("ArithmeticOperator", "/"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Arith_op",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Bool_expr ::= TRUE 
            {
              TreeNode RESULT =null;
		 	RESULT = new BoolConstant("BoolConstant", "true"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Bool_expr",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Bool_expr ::= FALSE 
            {
              TreeNode RESULT =null;
		 	RESULT = new BoolConstant("BoolConstant", "false"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Bool_expr",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Bool_expr ::= Bool_expr Bool_op Bool_expr 
            {
              TreeNode RESULT =null;
		int bool_expr_1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int bool_expr_1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		TreeNode bool_expr_1 = (TreeNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int bool_opleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int bool_opright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		TreeNode bool_op = (TreeNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int bool_expr_2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int bool_expr_2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		TreeNode bool_expr_2 = (TreeNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		  ArrayList<TreeNode<Object>> node = new ArrayList<TreeNode<Object>>();
																								node.add(bool_expr_1);
																								node.add(bool_expr_2);
																								node.add(bool_op);
																								RESULT = new BoolOp("BoolOp", node);
																							
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Bool_expr",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Bool_expr ::= NOT Bool_expr 
            {
              TreeNode RESULT =null;
		int bool_exprleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int bool_exprright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		TreeNode bool_expr = (TreeNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		  ArrayList<TreeNode<Object>> node = new ArrayList<TreeNode<Object>>();
																								node.add(bool_expr);
																								RESULT = new  NotOp("NotOp", node);
																							
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Bool_expr",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Bool_expr ::= Expr Rel_op Expr 
            {
              TreeNode RESULT =null;
		int expr_1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int expr_1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		TreeNode expr_1 = (TreeNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int relopleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int relopright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		TreeNode relop = (TreeNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int expr_2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int expr_2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		TreeNode expr_2 = (TreeNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		  ArrayList<TreeNode<Object>> node = new ArrayList<TreeNode<Object>>();
																								node.add(expr_1);
																								node.add(expr_2);
																								node.add(relop);
																								RESULT = new ExpBoolOp("ExpBoolOp", node);
																							
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Bool_expr",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Bool_expr ::= LPAR Bool_expr RPAR 
            {
              TreeNode RESULT =null;
		int bool_exprleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int bool_exprright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		TreeNode bool_expr = (TreeNode)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 	RESULT = bool_expr; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Bool_expr",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Bool_op ::= AND 
            {
              TreeNode RESULT =null;
		 RESULT = new BoolOperator("BoolOperator", "and"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Bool_op",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Bool_op ::= OR 
            {
              TreeNode RESULT =null;
		 RESULT = new BoolOperator("BoolOperator", "or"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Bool_op",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Rel_op ::= GT 
            {
              TreeNode RESULT =null;
		 RESULT = new RelOp("RelOp", ">"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Rel_op",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Rel_op ::= GE 
            {
              TreeNode RESULT =null;
		 RESULT = new RelOp("RelOp", ">="); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Rel_op",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Rel_op ::= LT 
            {
              TreeNode RESULT =null;
		 RESULT = new RelOp("RelOp", "<"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Rel_op",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Rel_op ::= LE 
            {
              TreeNode RESULT =null;
		 RESULT = new RelOp("RelOp", "<="); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Rel_op",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Rel_op ::= EQ 
            {
              TreeNode RESULT =null;
		 RESULT = new RelOp("RelOp", "=="); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Rel_op",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserCup$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
              return CUP$ParserCup$do_action_part00000000(
                               CUP$ParserCup$act_num,
                               CUP$ParserCup$parser,
                               CUP$ParserCup$stack,
                               CUP$ParserCup$top);
    }
}

}
